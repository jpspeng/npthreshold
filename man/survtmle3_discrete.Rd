% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/survtmle3_discrete.R
\name{survtmle3_discrete}
\alias{survtmle3_discrete}
\title{Causal Survival Analysis using TMLE for discrete time-to-event variables}
\usage{
survtmle3_discrete(
  failure_time,
  event_type,
  treatment,
  covariates,
  weights = rep(1, length(treatment)),
  id = 1:length(treatment),
  learner.treatment,
  learner.failure_time,
  learner.censoring_time,
  learner.event_type,
  target_failure_time = median(failure_time),
  target_treatment = sort(unique(treatment)),
  target_event_type = setdiff(unique(event_type), 0),
  failure_time.stratify_by_time = FALSE,
  censoring_time.stratify_by_time = FALSE,
  cross_fit = TRUE,
  cross_validate = FALSE,
  calibrate = TRUE,
  autoML = FALSE,
  nfolds = 10,
  max_iter = 200,
  tol = 0.1/sqrt(sum(weights))/log(length(treatment)),
  verbose = TRUE
)
}
\arguments{
\item{failure_time}{A numeric vector representing the time-to-event outcomes (e.g., time until death, failure, or censoring) for each observation.
The computational time and complexity of `survtmle_discrete` can significantly increase with the number of unique failure times.
For continuous or multi-valued discrete times, it is advisable to discretize the time-to-event variables into a grid of 20-30 time points.
Specifically, the dimension of the hazard estimation tasks generally scales linearly with the length of unique event times.}

\item{event_type}{A numeric vector of integers (0, 1, 2, ...) indicating the type of event for each observation. 0 is assumed to be censoring, and other values represent different types of failure events.}

\item{treatment}{A binary (0 or 1) or discrete (integer valued) treatment indicator vector indicating the treatment assignment for each observation.}

\item{covariates}{A named matrix specifying the names of potential counfounding variables in the dataset that should be used as adjustment covariates in the causal analysis.}

\item{weights}{A numeric vector of weights for each observation. Default is equal weights for all observations.}

\item{id}{A vector of unique identifiers for each observation. Default is a sequence from 1 to the length of 'treatment'.}

\item{learner.treatment}{A \code{binomial} \code{\link[sl3]{Lrnr_base}} learner object used for fitting the propensity score model for the treatment mechanism.
For nonbinary categorical treatment, this is used as \code{binomial_learner} in \code{\link[sl3]{Lrnr_independent_binomial}}.
Default uses auto ensemble learning by calling `causalutils::get_autoML()`.}

\item{learner.failure_time}{A \code{binomial} \code{\link[sl3]} learner object used for fitting the conditional hazard model for failure.
This learner is used as \code{binomial_learner} for \code{\link[sl3]{Lrnr_pooled_hazards}}.
Default uses auto ensemble learning by calling `causalutils::get_autoML()`.}

\item{learner.censoring_time}{A \code{binomial} \code{\link[sl3]{Lrnr_base}} learner object used for fitting conditional hazard model for censoring.
This learner is used as \code{binomial_learner} for \code{\link[sl3]{Lrnr_pooled_hazards}}.
Default uses auto ensemble learning by calling `causalutils::get_autoML()`.}

\item{learner.event_type}{A \code{binomial} \code{\link[sl3][Lrnr_base]} learner object used for fitting the conditional probability distribution for failure time of the failure event type.
For nonbinary categorical event type, this is used as \code{binomial_learner} in \code{\link[sl3]{Lrnr_independent_binomial}}.
Default uses auto ensemble learning by calling `causalutils::get_autoML()`.}

\item{target_failure_time}{The target time points for which the treatment effect estimates will be computed. Default is the median of 'failure_time'.}

\item{target_treatment}{The target treatment values for which the treatment effect estimates will be computed. Default includes all unique values of 'treatment'.}

\item{target_event_type}{The target event types for which the treatment effect estimates will be computed. Default includes all unique non-zero values of 'event_type'.}

\item{failure_time.stratify_by_time}{A logical value indicating whether to stratify the analysis by time when fitting the conditional hazard model for failure time.}

\item{censoring_time.stratify_by_time}{A logical value indicating whether to stratify the analysis by time when fitting the conditional hazard model for censoring time.}

\item{cross_fit}{A logical value indicating whether to use cross-fitting (TRUE) or not (FALSE) when fitting the TMLE models.
See \code{\link[causalutils]{make_cross_fitted}}.}

\item{calibrate}{A logical value indicating whether to perform calibration of treatment effect estimates using cross-validation.}

\item{nfolds}{The number of folds to be used in cross-fitting. Default is 10.}

\item{max_iter}{The maximum number of iterations for the TMLE algorithm. Default is 200.}

\item{tol}{The convergence tolerance for the TMLE algorithm. Default is calculated based on the number of observations.}

\item{verbose}{A logical value indicating whether to display progress and diagnostic messages during the computation. Default is TRUE.}
}
\value{
A list containing the estimated treatment effects and other relevant information from the TMLE analysis.
}
\description{
This function performs causal survival analysis using targeted maximum likelihood estimation (TMLE) approach.
It estimates the treatment effect on survival outcomes while accounting for confounding variables and potential biases.
This method assumes the time-to-event variables are discrete with not too many levels.
}
\examples{
# Generate example data

# Perform causal survival analysis using autoML
result <- survtmle3_discrete(failure_time = time, event_type = status, treatment = treatment, covariates = covariates,
target_failure_time = t0,  target_treatment = a0)

# add custom learner
result <- survtmle3_discrete(failure_time = time, event_type = status, treatment = treatment, covariates = covariates,
target_failure_time = t0,  target_treatment = a0,
learner.treatment = Lrnr_glmnet$new(),
learner.failure_time = Lrnr_gam$new(),
learner.censoring_time = Lrnr_gam$new(),
learner.event_type = Lrnr_earth$new(),
cross_fit = FALSE
)


}
\seealso{
\code{\link{survtmle}}: The original survtmle package in R.
}
\keyword{TMLE,}
\keyword{analysis,}
\keyword{causal}
\keyword{effect}
\keyword{inference,}
\keyword{survival}
\keyword{treatment}
